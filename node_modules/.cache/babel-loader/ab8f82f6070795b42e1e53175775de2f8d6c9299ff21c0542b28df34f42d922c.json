{"ast":null,"code":"var _jsxFileName = \"/Users/gautamthakur/Documents/closet-store-starter/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setKeyword } from \"../features/contentSlice\";\n\n// /**\n//  * Keyword search component.\n//  * Updates Redux state and updates URL for persistence.\n//  */\n\n// export default function SearchBar() {\n//   const dispatch = useDispatch();\n//   const keyword = useSelector((s) => s.content.filters.keyword);\n//   const [value, setValue] = useState(keyword || \"\");\n\n//   useEffect(() => {\n//     setValue(keyword || \"\");\n//   }, [keyword]);\n\n//   function updateUrl(filters) {\n//     const q = new URLSearchParams();\n//     if (filters.keyword) q.set(\"q\", filters.keyword);\n//     const { paid, free, viewOnly } = filters.pricing;\n//     if (paid) q.set(\"paid\", \"1\");\n//     if (free) q.set(\"free\", \"1\");\n//     if (viewOnly) q.set(\"viewOnly\", \"1\");\n//     const newUrl = window.location.pathname + \"?\" + q.toString();\n//     window.history.replaceState(null, \"\", newUrl);\n//   }\n\n//   const onSubmit = (e) => {\n//     e.preventDefault();\n//     dispatch(setKeyword(value.trim()));\n//     // update the URL using current global filters\n//     const currentFilters = JSON.parse(JSON.stringify((dispatch, getState) => {})); // placeholder not used\n//     // Instead read current filters from store\n//     const storeFilters = window.__REDUX_STORE_SNAPSHOT__ || null;\n//     // We'll build updated filters using existing URL read because we don't have store here\n//     // Simpler: read query then update q param\n//     const params = new URLSearchParams(window.location.search);\n//     if (value) params.set(\"q\", value);\n//     else params.delete(\"q\");\n//     const newUrl = window.location.pathname + \"?\" + params.toString();\n//     window.history.replaceState(null, \"\", newUrl);\n//   };\n\n//   const onChange = (e) => setValue(e.target.value);\n\n//   return (\n//     <form className=\"search-row\" onSubmit={onSubmit}>\n//       <input\n//         className=\"search-input\"\n//         placeholder=\"Search for Avatars\"\n//         value={value}\n//         onChange={onChange}\n//       />\n//       <button type=\"submit\" className=\"search-btn\">Search</button>\n//     </form>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setKeyword } from \"../features/contentSlice\";\n\n/**\n * SearchBar:\n * - Updates keyword in Redux\n * - Updates URL query params for persistence\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar() {\n  _s();\n  const dispatch = useDispatch();\n  const filters = useSelector(s => s.content.filters); // full filters\n  const [value, setValue] = useState(filters.keyword || \"\");\n  useEffect(() => {\n    setValue(filters.keyword || \"\");\n  }, [filters.keyword]);\n  const updateUrl = newKeyword => {\n    const params = new URLSearchParams();\n    if (newKeyword) params.set(\"q\", newKeyword);\n    if (filters.pricing.paid) params.set(\"paid\", \"1\");\n    if (filters.pricing.free) params.set(\"free\", \"1\");\n    if (filters.pricing.viewOnly) params.set(\"viewOnly\", \"1\");\n    const newUrl = window.location.pathname + \"?\" + params.toString();\n    window.history.replaceState(null, \"\", newUrl);\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n    dispatch(setKeyword(value.trim()));\n    updateUrl(value.trim());\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"search-row\",\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-input\",\n      placeholder: \"Search for Avatars\",\n      value: value,\n      onChange: e => setValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"search-btn\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchBar, \"MfQ4wpaUlTy2WWrPWy5yFg2mgBU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","setKeyword","jsxDEV","_jsxDEV","SearchBar","_s","dispatch","filters","s","content","value","setValue","keyword","updateUrl","newKeyword","params","URLSearchParams","set","pricing","paid","free","viewOnly","newUrl","window","location","pathname","toString","history","replaceState","onSubmit","e","preventDefault","trim","className","children","placeholder","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/gautamthakur/Documents/closet-store-starter/src/components/SearchBar.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setKeyword } from \"../features/contentSlice\";\n\n// /**\n//  * Keyword search component.\n//  * Updates Redux state and updates URL for persistence.\n//  */\n\n// export default function SearchBar() {\n//   const dispatch = useDispatch();\n//   const keyword = useSelector((s) => s.content.filters.keyword);\n//   const [value, setValue] = useState(keyword || \"\");\n\n//   useEffect(() => {\n//     setValue(keyword || \"\");\n//   }, [keyword]);\n\n//   function updateUrl(filters) {\n//     const q = new URLSearchParams();\n//     if (filters.keyword) q.set(\"q\", filters.keyword);\n//     const { paid, free, viewOnly } = filters.pricing;\n//     if (paid) q.set(\"paid\", \"1\");\n//     if (free) q.set(\"free\", \"1\");\n//     if (viewOnly) q.set(\"viewOnly\", \"1\");\n//     const newUrl = window.location.pathname + \"?\" + q.toString();\n//     window.history.replaceState(null, \"\", newUrl);\n//   }\n\n//   const onSubmit = (e) => {\n//     e.preventDefault();\n//     dispatch(setKeyword(value.trim()));\n//     // update the URL using current global filters\n//     const currentFilters = JSON.parse(JSON.stringify((dispatch, getState) => {})); // placeholder not used\n//     // Instead read current filters from store\n//     const storeFilters = window.__REDUX_STORE_SNAPSHOT__ || null;\n//     // We'll build updated filters using existing URL read because we don't have store here\n//     // Simpler: read query then update q param\n//     const params = new URLSearchParams(window.location.search);\n//     if (value) params.set(\"q\", value);\n//     else params.delete(\"q\");\n//     const newUrl = window.location.pathname + \"?\" + params.toString();\n//     window.history.replaceState(null, \"\", newUrl);\n//   };\n\n//   const onChange = (e) => setValue(e.target.value);\n\n//   return (\n//     <form className=\"search-row\" onSubmit={onSubmit}>\n//       <input\n//         className=\"search-input\"\n//         placeholder=\"Search for Avatars\"\n//         value={value}\n//         onChange={onChange}\n//       />\n//       <button type=\"submit\" className=\"search-btn\">Search</button>\n//     </form>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setKeyword } from \"../features/contentSlice\";\n\n/**\n * SearchBar:\n * - Updates keyword in Redux\n * - Updates URL query params for persistence\n */\nexport default function SearchBar() {\n  const dispatch = useDispatch();\n  const filters = useSelector((s) => s.content.filters); // full filters\n  const [value, setValue] = useState(filters.keyword || \"\");\n\n  useEffect(() => {\n    setValue(filters.keyword || \"\");\n  }, [filters.keyword]);\n\n  const updateUrl = (newKeyword) => {\n    const params = new URLSearchParams();\n    if (newKeyword) params.set(\"q\", newKeyword);\n    if (filters.pricing.paid) params.set(\"paid\", \"1\");\n    if (filters.pricing.free) params.set(\"free\", \"1\");\n    if (filters.pricing.viewOnly) params.set(\"viewOnly\", \"1\");\n    const newUrl = window.location.pathname + \"?\" + params.toString();\n    window.history.replaceState(null, \"\", newUrl);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    dispatch(setKeyword(value.trim()));\n    updateUrl(value.trim());\n  };\n\n  return (\n    <form className=\"search-row\" onSubmit={onSubmit}>\n      <input\n        className=\"search-input\"\n        placeholder=\"Search for Avatars\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <button type=\"submit\" className=\"search-btn\">\n        Search\n      </button>\n    </form>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}